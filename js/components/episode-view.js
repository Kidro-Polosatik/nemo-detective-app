class EpisodeView {
    static show(episodeId) {
        const episode = window.episodes[episodeId];
        if (!episode) {
            console.error(`–≠–ø–∏–∑–æ–¥ ${episodeId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            Menu.show();
            return;
        }
        
        const container = document.getElementById('app-container');
        container.innerHTML = this.render(episode);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        window.appState.currentView = 'episode';
        window.appState.currentEpisodeId = episodeId;
    }
    
    static render(episode) {
        return `
            <div class="episode-container">
                <div class="episode-title">–ì–ª–∞–≤–∞ ${episode.chapter}, –≠–ø–∏–∑–æ–¥ ${episode.id}: ${episode.title}</div>
                <div class="episode-text">${episode.text}</div>
                
                ${episode.hasInput ? `
                <input type="text" class="answer-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..." id="answer-input">
                <button class="submit-btn" onclick="EpisodeView.submitAnswer('${episode.id}')">
                    üîç –û–¢–ü–†–ê–í–ò–¢–¨ –û–¢–í–ï–¢
                </button>
                ` : `
                <button class="submit-btn" onclick="EpisodeView.nextEpisode('${episode.id}')">
                    ‚û°Ô∏è –î–ê–õ–ï–ï
                </button>
                `}
                
                <button class="back-btn" onclick="Menu.show()">‚Üê –í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ</button>
            </div>
        `;
    }
    
    static submitAnswer(episodeId) {
        const episode = window.episodes[episodeId];
        const answerInput = document.getElementById('answer-input');
        const answer = answerInput.value.trim().toLowerCase();
        
        if (!answer) {
            window.tg.showPopup({
                title: '–í–Ω–∏–º–∞–Ω–∏–µ!',
                message: '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.',
                buttons: [{ type: 'ok' }]
            });
            return;
        }
        
        if (episode.correctAnswers.includes(answer)) {
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            window.appState.userData.score += 10;
            window.appState.userData.currentEpisode = parseInt(episodeId.split('_')[1]) + 1;
            
            this.saveUserData();
            
            window.tg.showPopup({
                title: '‚úÖ –í–µ—Ä–Ω–æ!',
                message: `+10 –±–∞–ª–ª–æ–≤! –¢–≤–æ–π —Å—á—ë—Ç: ${window.appState.userData.score}`,
                buttons: [{ type: 'ok' }]
            });
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ø–∏–∑–æ–¥—É
            setTimeout(() => {
                const nextEpisodeId = `${episode.chapter}_${parseInt(episode.id) + 1}`;
                if (window.episodes[nextEpisodeId]) {
                    this.show(nextEpisodeId);
                } else {
                    // –ì–ª–∞–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    window.tg.showPopup({
                        title: 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!',
                        message: '–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≥–ª–∞–≤—É 1!',
                        buttons: [{ type: 'ok' }]
                    });
                    Menu.show();
                }
            }, 1000);
            
        } else {
            // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            window.tg.showPopup({
                title: '‚ùå –ù–µ–≤–µ—Ä–Ω–æ',
                message: '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!',
                buttons: [{ type: 'ok' }]
            });
        }
    }
    
    static nextEpisode(episodeId) {
        const episode = window.episodes[episodeId];
        const nextEpisodeId = `${episode.chapter}_${parseInt(episode.id) + 1}`;
        this.show(nextEpisodeId);
    }
    
    static saveUserData() {
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        console.log('User data saved:', window.appState.userData);
    }
}