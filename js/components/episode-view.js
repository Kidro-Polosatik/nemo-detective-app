static submitAnswer(fullEpisodeId) {
    console.log('=== –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê ===', fullEpisodeId);
    
    const episode = window.episodes[fullEpisodeId];
    if (!episode) {
        console.error('‚ùå ERROR: –≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.showAlert('–û—à–∏–±–∫–∞: —ç–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ø–∏–∑–æ–¥ –µ—â–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω
    const isAlreadyCompleted = window.appState?.userData?.completedEpisodes?.includes(fullEpisodeId);
    
    if (isAlreadyCompleted) {
        console.log('‚ÑπÔ∏è –≠–ø–∏–∑–æ–¥ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É');
        this.nextEpisode(fullEpisodeId);
        return;
    }

    const answerInput = document.getElementById('answer-input');
    let answer = answerInput ? answerInput.value.trim() : '';
    
    console.log('üìù –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç:', answer);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ –µ–¥–∏–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const correctAnswers = window.episodeAnswers ? window.episodeAnswers[fullEpisodeId] : [];
    
    console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:', correctAnswers);
    
    if (!correctAnswers || correctAnswers.length === 0) {
        console.error('‚ùå –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç–ø–∏–∑–æ–¥–∞:', fullEpisodeId);
        this.showAlert('–û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    if (!answer) {
        this.showAlert('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π!');
        return;
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç
    const normalizedAnswer = this.normalizeAnswer(answer);
    
    const isCorrect = correctAnswers.some(correct => {
        const normalizedCorrect = this.normalizeAnswer(correct);
        return normalizedCorrect === normalizedAnswer;
    });
    
    console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:', isCorrect);
    
    if (isCorrect) {
        this.handleCorrectAnswer(fullEpisodeId, episode);
    } else {
        this.handleWrongAnswer(answerInput);
    }
}

static handleCorrectAnswer(fullEpisodeId, episode) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ø–∏–∑–æ–¥ –µ—â–µ –Ω–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω
    if (window.appState?.userData?.completedEpisodes?.includes(fullEpisodeId)) {
        console.log('‚ö†Ô∏è –≠–ø–∏–∑–æ–¥ —É–∂–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω —Ä–∞–Ω–µ–µ');
        this.showAlert('–≠—Ç–æ—Ç —ç–ø–∏–∑–æ–¥ —É–∂–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω!');
        this.nextEpisode(fullEpisodeId);
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const phrase = this.getRandomPhrase('correct');
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if (window.appState && window.appState.userData) {
        window.appState.userData.score += 10;
        
        const nextEpisodeNumber = parseInt(episode.id) + 1;
        window.appState.userData.currentEpisode = nextEpisodeNumber;
        
        if (!window.appState.userData.completedEpisodes) {
            window.appState.userData.completedEpisodes = [];
        }
        
        if (!window.appState.userData.completedEpisodes.includes(fullEpisodeId)) {
            window.appState.userData.completedEpisodes.push(fullEpisodeId);
        }
        
        this.saveUserData();
        
        this.showAlert(`‚úÖ ${phrase}! +10 –±–∞–ª–ª–æ–≤!`);
        
        setTimeout(() => {
            this.show(fullEpisodeId);
        }, 1500);
        
    } else {
        this.showAlert(`‚úÖ ${phrase}!`);
        this.nextEpisode(fullEpisodeId);
    }
}

static handleWrongAnswer(answerInput) {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const phrase = this.getRandomPhrase('wrong');
    this.showAlert(`‚ùå ${phrase}`);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
    if (answerInput) {
        answerInput.value = '';
        answerInput.focus();
    }
}

// –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ñ—Ä–∞–∑—ã
static getRandomPhrase(type) {
    if (!window.gamePhrases || !window.gamePhrases[type]) {
        return type === 'correct' ? '–í–µ—Ä–Ω–æ!' : '–ù–µ–≤–µ—Ä–Ω–æ!';
    }
    
    const phrases = window.gamePhrases[type];
    return phrases[Math.floor(Math.random() * phrases.length)];
}