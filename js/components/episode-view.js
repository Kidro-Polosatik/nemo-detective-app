class EpisodeView {
    static show(episodeId) {
        console.log('=== –ü–û–ö–ê–ó –≠–ü–ò–ó–û–î–ê ===', episodeId);
        
        const episode = window.episodes[episodeId];
        if (!episode) {
            console.error('ERROR: –≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω', episodeId);
            console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã:', Object.keys(window.episodes || {}));
            
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è Menu
            if (typeof Menu !== 'undefined') {
                Menu.show();
            } else {
                // Fallback
                document.getElementById('app-container').innerHTML = `
                    <div class="episode-container">
                        <h2>–û—à–∏–±–∫–∞</h2>
                        <p>–≠–ø–∏–∑–æ–¥ ${episodeId} –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
                        <button class="back-btn" onclick="location.reload()">üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
                    </div>
                `;
            }
            return;
        }
        
        console.log('–≠–ø–∏–∑–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω:', episode.title);
        
        const container = document.getElementById('app-container');
        if (!container) {
            console.error('ERROR: app-container –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        container.innerHTML = this.render(episode);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π
        if (window.appState) {
            window.appState.currentView = 'episode';
            window.appState.currentEpisodeId = episodeId;
        }
        
        console.log('–≠–ø–∏–∑–æ–¥ –æ—Ç–æ–±—Ä–∞–∂—ë–Ω');
    }
    
    static render(episode) {
        const fullEpisodeId = `${episode.chapter}_${episode.id}`;
        const correctAnswers = episode.correctAnswers || [];
        
        return `
            <div class="episode-container">
                <div class="episode-title">–ì–ª–∞–≤–∞ ${episode.chapter}, –≠–ø–∏–∑–æ–¥ ${episode.id}: ${episode.title}</div>
                <div class="episode-text">${episode.text}</div>
                
                ${episode.hasInput ? `
                <input type="text" class="answer-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..." id="answer-input">
                <button class="submit-btn" onclick="EpisodeView.submitAnswer('${fullEpisodeId}')">
                    üîç –û–¢–ü–†–ê–í–ò–¢–¨ –û–¢–í–ï–¢
                </button>
                ` : `
                <button class="submit-btn" onclick="EpisodeView.nextEpisode('${fullEpisodeId}')">
                    ‚û°Ô∏è –î–ê–õ–ï–ï
                </button>
                `}
                
                <button class="back-btn" onclick="EpisodeView.goBack()">‚Üê –í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ</button>
            </div>
        `;
    }
    
    static submitAnswer(fullEpisodeId) {
        console.log('=== –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê ===', fullEpisodeId);
        
        const episode = window.episodes[fullEpisodeId];
        if (!episode) {
            console.error('ERROR: –≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            alert('–û—à–∏–±–∫–∞: —ç–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const answerInput = document.getElementById('answer-input');
        const answer = answerInput ? answerInput.value.trim().toLowerCase() : '';
        
        console.log('–û—Ç–≤–µ—Ç:', answer);
        console.log('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:', episode.correctAnswers);
        
        if (!answer) {
            alert('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π!');
            return;
        }
        
        const correctAnswers = episode.correctAnswers || [];
        const normalizedAnswer = answer.replace(/\s+/g, ' ').trim();
        
        const isCorrect = correctAnswers.some(correct => {
            const normalizedCorrect = String(correct).toLowerCase().replace(/\s+/g, ' ').trim();
            return normalizedCorrect === normalizedAnswer;
        });
        
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', isCorrect);
        
        if (isCorrect) {
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if (window.appState && window.appState.userData) {
                window.appState.userData.score += 10;
                window.appState.userData.currentEpisode = parseInt(episode.id) + 1;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                try {
                    localStorage.setItem('nemo_detective_data', JSON.stringify(window.appState.userData));
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e);
                }
            }
            
            alert(`‚úÖ –í–µ—Ä–Ω–æ! +10 –±–∞–ª–ª–æ–≤!`);
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ø–∏–∑–æ–¥—É
            setTimeout(() => {
                const nextEpisodeId = `${episode.chapter}_${parseInt(episode.id) + 1}`;
                console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫:', nextEpisodeId);
                
                if (window.episodes[nextEpisodeId]) {
                    this.show(nextEpisodeId);
                } else {
                    alert('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≥–ª–∞–≤—É 1!');
                    this.goBack();
                }
            }, 1000);
            
        } else {
            alert('‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!');
        }
    }
    
    static nextEpisode(currentEpisodeId) {
        console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ø–∏–∑–æ–¥—É:', currentEpisodeId);
        const currentEpisode = window.episodes[currentEpisodeId];
        if (!currentEpisode) {
            this.goBack();
            return;
        }
        
        const nextEpisodeId = `${currentEpisode.chapter}_${parseInt(currentEpisode.id) + 1}`;
        this.show(nextEpisodeId);
    }
    
    static goBack() {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è Menu
        if (typeof Menu !== 'undefined') {
            Menu.show();
        } else {
            location.reload();
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
window.EpisodeView = EpisodeView;
console.log('EpisodeView –∫–ª–∞—Å—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');