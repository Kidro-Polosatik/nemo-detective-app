class EpisodeView {
    static show(episodeId) {
        DebugLogger.log('=== –ü–û–ö–ê–ó –≠–ü–ò–ó–û–î–ê ===', episodeId);
        
        const episode = window.episodes[episodeId];
        if (!episode) {
            DebugLogger.log('ERROR: –≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω', episodeId);
            DebugLogger.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã:', Object.keys(window.episodes || {}));
            Menu.show();
            return;
        }
        
        DebugLogger.log('–≠–ø–∏–∑–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω:', episode.title);
        DebugLogger.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–ø–∏–∑–æ–¥–∞:', episode);
        
        const container = document.getElementById('app-container');
        container.innerHTML = this.render(episode);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        window.appState.currentView = 'episode';
        window.appState.currentEpisodeId = episodeId;
        
        DebugLogger.log('–≠–ø–∏–∑–æ–¥ –æ—Ç–æ–±—Ä–∞–∂—ë–Ω');
    }
    
    static render(episode) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π ID —ç–ø–∏–∑–æ–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞
        const fullEpisodeId = `${episode.chapter}_${episode.id}`;
        
        return `
            <div class="episode-container">
                <div class="episode-title">–ì–ª–∞–≤–∞ ${episode.chapter}, –≠–ø–∏–∑–æ–¥ ${episode.id}: ${episode.title}</div>
                <div class="episode-text">${episode.text}</div>
                
                ${episode.hasInput ? `
                <input type="text" class="answer-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..." id="answer-input">
                <button class="submit-btn" onclick="EpisodeView.submitAnswer('${fullEpisodeId}')">
                    üîç –û–¢–ü–†–ê–í–ò–¢–¨ –û–¢–í–ï–¢
                </button>
                ` : `
                <button class="submit-btn" onclick="EpisodeView.nextEpisode('${fullEpisodeId}')">
                    ‚û°Ô∏è –î–ê–õ–ï–ï
                </button>
                `}
                
                <button class="back-btn" onclick="Menu.show()">‚Üê –í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ</button>
                
                <!-- –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                <div style="margin-top: 10px; font-size: 12px; color: #666; border-top: 1px solid #333; padding-top: 10px;">
                    <strong>–û—Ç–ª–∞–¥–∫–∞:</strong> –≠–ø–∏–∑–æ–¥ ${fullEpisodeId} | –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: ${(episode.correctAnswers || []).join(', ')}
                </div>
            </div>
        `;
    }
    
    static submitAnswer(fullEpisodeId) {
        DebugLogger.log('=== –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê ===');
        DebugLogger.log('–ü–æ–ª–Ω—ã–π ID —ç–ø–∏–∑–æ–¥–∞:', fullEpisodeId);
        
        const episode = window.episodes[fullEpisodeId];
        DebugLogger.log('–≠–ø–∏–∑–æ–¥ –Ω–∞–π–¥–µ–Ω:', !!episode);
        
        if (!episode) {
            DebugLogger.log('ERROR: –≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ window.episodes');
            DebugLogger.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã:', Object.keys(window.episodes || {}));
            window.tg.showPopup({
                title: '–û—à–∏–±–∫–∞',
                message: '–≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω',
                buttons: [{ type: 'ok' }]
            });
            return;
        }
        
        DebugLogger.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–ø–∏–∑–æ–¥–∞:', episode);
        
        const answerInput = document.getElementById('answer-input');
        DebugLogger.log('–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–æ:', !!answerInput);
        
        const answer = answerInput ? answerInput.value.trim().toLowerCase() : '';
        DebugLogger.log('–í–≤–µ–¥—ë–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:', `"${answer}"`);
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined correctAnswers
        const correctAnswers = episode.correctAnswers || [];
        DebugLogger.log('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:', correctAnswers);
        
        if (!answer) {
            DebugLogger.log('ERROR: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
            window.tg.showPopup({
                title: '–í–Ω–∏–º–∞–Ω–∏–µ!',
                message: '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.',
                buttons: [{ type: 'ok' }]
            });
            return;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const normalizedAnswer = answer.replace(/\s+/g, ' ').trim();
        
        const isCorrect = correctAnswers.some(correct => {
            const normalizedCorrect = String(correct).toLowerCase().replace(/\s+/g, ' ').trim();
            const match = normalizedCorrect === normalizedAnswer;
            DebugLogger.log('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:', `"${normalizedAnswer}" === "${normalizedCorrect}" = ${match}`);
            return match;
        });
        
        DebugLogger.log('–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', isCorrect);
        
        if (isCorrect) {
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            window.appState.userData.score += 10;
            window.appState.userData.currentEpisode = parseInt(episode.id) + 1;
            
            DebugLogger.log('–ù–æ–≤—ã–π —Å—á—ë—Ç:', window.appState.userData.score);
            DebugLogger.log('–°–ª–µ–¥—É—é—â–∏–π —ç–ø–∏–∑–æ–¥:', window.appState.userData.currentEpisode);
            
            this.saveUserData();
            
            window.tg.showPopup({
                title: '‚úÖ –í–µ—Ä–Ω–æ!',
                message: `+10 –±–∞–ª–ª–æ–≤! –¢–≤–æ–π —Å—á—ë—Ç: ${window.appState.userData.score}`,
                buttons: [{ type: 'ok' }]
            });
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ø–∏–∑–æ–¥—É
            setTimeout(() => {
                const nextEpisodeId = `${episode.chapter}_${parseInt(episode.id) + 1}`;
                DebugLogger.log('–ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–π—Ç–∏ –∫ —ç–ø–∏–∑–æ–¥—É:', nextEpisodeId);
                
                if (window.episodes[nextEpisodeId]) {
                    DebugLogger.log('–°–ª–µ–¥—É—é—â–∏–π —ç–ø–∏–∑–æ–¥ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º...');
                    this.show(nextEpisodeId);
                } else {
                    // –ì–ª–∞–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    DebugLogger.log('–ì–ª–∞–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
                    window.tg.showPopup({
                        title: 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!',
                        message: '–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≥–ª–∞–≤—É 1!',
                        buttons: [{ type: 'ok' }]
                    });
                    Menu.show();
                }
            }, 1000);
            
        } else {
            // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            DebugLogger.log('ERROR: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç');
            window.tg.showPopup({
                title: '‚ùå –ù–µ–≤–µ—Ä–Ω–æ',
                message: '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!',
                buttons: [{ type: 'ok' }]
            });
        }
    }
    
    static nextEpisode(currentEpisodeId) {
        DebugLogger.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ø–∏–∑–æ–¥—É –∏–∑:', currentEpisodeId);
        const currentEpisode = window.episodes[currentEpisodeId];
        const nextEpisodeId = `${currentEpisode.chapter}_${parseInt(currentEpisode.id) + 1}`;
        this.show(nextEpisodeId);
    }
    
    static saveUserData() {
        try {
            localStorage.setItem('nemo_detective_data', JSON.stringify(window.appState.userData));
            DebugLogger.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', window.appState.userData);
        } catch (e) {
            DebugLogger.log('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', e);
        }
    }
}