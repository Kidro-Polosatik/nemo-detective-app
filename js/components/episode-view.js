class EpisodeView {
    static show(episodeId) {
        console.log('=== –ü–û–ö–ê–ó –≠–ü–ò–ó–û–î–ê ===', episodeId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ø–∏–∑–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if (!window.episodes) {
            console.error('‚ùå ERROR: –≠–ø–∏–∑–æ–¥—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            this.showEpisodeError('–≠–ø–∏–∑–æ–¥—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return;
        }
        
        const episode = window.episodes[episodeId];
        if (!episode) {
            console.error('‚ùå ERROR: –≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω', episodeId);
            console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã:', Object.keys(window.episodes));
            this.showEpisodeError(`–≠–ø–∏–∑–æ–¥ ${episodeId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }
        
        console.log('‚úÖ –≠–ø–∏–∑–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω:', episode.title);
        
        const container = document.getElementById('app-container');
        if (!container) {
            console.error('‚ùå ERROR: app-container –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        container.innerHTML = this.render(episode);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π
        if (window.appState) {
            window.appState.currentView = 'episode';
            window.appState.currentEpisodeId = episodeId;
        }
        
        console.log('‚úÖ –≠–ø–∏–∑–æ–¥ –æ—Ç–æ–±—Ä–∞–∂—ë–Ω');
    }
    
    static render(episode) {
        const fullEpisodeId = `${episode.chapter}_${episode.id}`;
        const isCompleted = window.appState?.userData?.completedEpisodes?.includes(fullEpisodeId);
        
        return `
            <div class="episode-container">
                <div class="episode-title">
                    –ì–ª–∞–≤–∞ ${episode.chapter}, –≠–ø–∏–∑–æ–¥ ${episode.id}: ${episode.title}
                    ${isCompleted ? ' ‚úÖ' : ''}
                </div>
                <div class="episode-text">${episode.text}</div>
                
                ${episode.hasInput && !isCompleted ? `
                <div class="answer-section">
                    <input type="text" class="answer-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..." id="answer-input">
                    <button class="submit-btn" onclick="EpisodeView.submitAnswer('${fullEpisodeId}')">
                        üîç –û–¢–ü–†–ê–í–ò–¢–¨ –û–¢–í–ï–¢
                    </button>
                </div>
                ` : ''}
                
                ${isCompleted ? `
                <div style="text-align: center; margin: 20px 0;">
                    <div style="color: #ffd700; font-size: 1.2rem; margin-bottom: 15px;">‚úÖ –≠–ø–∏–∑–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω!</div>
                    <button class="submit-btn" onclick="EpisodeView.nextEpisode('${fullEpisodeId}')">
                        ‚û°Ô∏è –ü–ï–†–ï–ô–¢–ò –ö –°–õ–ï–î–£–Æ–©–ï–ú–£
                    </button>
                </div>
                ` : ''}
                
                ${!episode.hasInput && !isCompleted ? `
                <button class="submit-btn" onclick="EpisodeView.nextEpisode('${fullEpisodeId}')">
                    ‚û°Ô∏è –î–ê–õ–ï–ï
                </button>
                ` : ''}
                
                <button class="back-btn" onclick="EpisodeView.goBack()">‚Üê –í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ</button>
                
                <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç -->
                ${window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' ? `
                <div style="margin-top: 20px; padding: 10px; background: rgba(255,0,0,0.1); border-radius: 5px; text-align: center;">
                    <small style="color: #ff6b6b;">DEV MODE: </small>
                    <button onclick="EpisodeView.showCorrectAnswer('${fullEpisodeId}')" 
                            style="background: none; border: none; color: #ff6b6b; cursor: pointer; text-decoration: underline;">
                        –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    </button>
                </div>
                ` : ''}
            </div>
        `;
    }
    
    static submitAnswer(fullEpisodeId) {
        console.log('=== –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê ===', fullEpisodeId);
        
        const episode = window.episodes[fullEpisodeId];
        if (!episode) {
            console.error('‚ùå ERROR: –≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            this.showAlert('–û—à–∏–±–∫–∞: —ç–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ø–∏–∑–æ–¥ –µ—â–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω
        const isAlreadyCompleted = window.appState?.userData?.completedEpisodes?.includes(fullEpisodeId);
        
        if (isAlreadyCompleted) {
            console.log('‚ÑπÔ∏è –≠–ø–∏–∑–æ–¥ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É');
            this.nextEpisode(fullEpisodeId);
            return;
        }

        const answerInput = document.getElementById('answer-input');
        let answer = answerInput ? answerInput.value.trim() : '';
        
        console.log('üìù –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç:', answer);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ –µ–¥–∏–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        const answerData = window.episodeAnswers ? window.episodeAnswers[fullEpisodeId] : null;
        const correctAnswers = answerData ? answerData.answers : [];
        const hint = answerData ? answerData.hint : '–Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏';
        
        console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:', correctAnswers);
        
        if (!correctAnswers || correctAnswers.length === 0) {
            console.error('‚ùå –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç–ø–∏–∑–æ–¥–∞:', fullEpisodeId);
            this.showAlert('–û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        if (!answer) {
            this.showAlert('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π!');
            return;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç: –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
        const normalizedAnswer = this.normalizeAnswer(answer);
        
        const isCorrect = correctAnswers.some(correct => {
            const normalizedCorrect = this.normalizeAnswer(correct);
            return normalizedCorrect === normalizedAnswer;
        });
        
        console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:', isCorrect);
        console.log('üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:', normalizedAnswer, 'vs', correctAnswers.map(c => this.normalizeAnswer(c)));
        
        if (isCorrect) {
            this.handleCorrectAnswer(fullEpisodeId, episode);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            this.showAlert(`‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ "${hint}"`);
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
            if (answerInput) {
                answerInput.value = '';
                answerInput.focus();
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π)
    static normalizeAnswer(text) {
        return String(text)
            .toLowerCase()                    // –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
            .normalize('NFD')                // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º Unicode (—É–±–∏—Ä–∞–µ–º –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∏)
            .replace(/[\u0300-\u036f]/g, '') // —É–±–∏—Ä–∞–µ–º –¥–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏
            .replace(/[^\w\s–∞-—è—ë]/gi, ' ')   // –∑–∞–º–µ–Ω—è–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –Ω–∞ –ø—Ä–æ–±–µ–ª—ã (–≤–∫–ª—é—á–∞—è –∫–∏—Ä–∏–ª–ª–∏—Ü—É)
            .replace(/\s+/g, ' ')            // –∑–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
            .trim();                         // —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
    }
    
    static handleCorrectAnswer(fullEpisodeId, episode) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ø–∏–∑–æ–¥ –µ—â–µ –Ω–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω
        if (window.appState?.userData?.completedEpisodes?.includes(fullEpisodeId)) {
            console.log('‚ö†Ô∏è –≠–ø–∏–∑–æ–¥ —É–∂–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω —Ä–∞–Ω–µ–µ');
            this.showAlert('–≠—Ç–æ—Ç —ç–ø–∏–∑–æ–¥ —É–∂–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω!');
            this.nextEpisode(fullEpisodeId);
            return;
        }
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (window.appState && window.appState.userData) {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ø–∏–∑–æ–¥ –µ—â–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω
            window.appState.userData.score += 10;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–ø–∏–∑–æ–¥
            const nextEpisodeNumber = parseInt(episode.id) + 1;
            window.appState.userData.currentEpisode = nextEpisodeNumber;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã
            if (!window.appState.userData.completedEpisodes) {
                window.appState.userData.completedEpisodes = [];
            }
            
            if (!window.appState.userData.completedEpisodes.includes(fullEpisodeId)) {
                window.appState.userData.completedEpisodes.push(fullEpisodeId);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            this.saveUserData();
            
            this.showAlert(`‚úÖ –í–µ—Ä–Ω–æ! +10 –±–∞–ª–ª–æ–≤!`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–ø–∏–∑–æ–¥ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            setTimeout(() => {
                this.show(fullEpisodeId);
            }, 1500);
            
        } else {
            this.showAlert(`‚úÖ –í–µ—Ä–Ω–æ!`);
            this.nextEpisode(fullEpisodeId);
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    static showCorrectAnswer(fullEpisodeId) {
        const answerData = window.episodeAnswers ? window.episodeAnswers[fullEpisodeId] : null;
        if (answerData && answerData.answers) {
            this.showAlert(`–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: ${answerData.answers.join(', ')}`);
        } else {
            this.showAlert('–û—Ç–≤–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    }
    
    static nextEpisode(currentEpisodeId) {
        console.log('üîú –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ø–∏–∑–æ–¥—É:', currentEpisodeId);
        
        const currentEpisode = window.episodes[currentEpisodeId];
        if (!currentEpisode) {
            console.error('‚ùå –¢–µ–∫—É—â–∏–π —ç–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            this.goBack();
            return;
        }
        
        const nextEpisodeId = `${currentEpisode.chapter}_${parseInt(currentEpisode.id) + 1}`;
        
        if (window.episodes[nextEpisodeId]) {
            this.show(nextEpisodeId);
        } else {
            console.log('üéâ –ì–ª–∞–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            this.showChapterComplete();
        }
    }
    
    static showChapterComplete() {
        const container = document.getElementById('app-container');
        if (!container) return;
        
        container.innerHTML = `
            <div class="episode-container">
                <div class="episode-title" style="color: #ffd700; font-size: 1.6em;">
                    üéâ –ì–õ–ê–í–ê –ó–ê–í–ï–†–®–ï–ù–ê!
                </div>
                <div class="episode-text" style="text-align: center; font-size: 1.2em;">
                    –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ì–ª–∞–≤—É 1.<br><br>
                    –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç: <strong>${window.appState?.userData?.score || 0} –±–∞–ª–ª–æ–≤</strong>
                </div>
                <button class="submit-btn" onclick="EpisodeView.goBack()" style="margin-top: 20px;">
                    üè† –í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ
                </button>
            </div>
        `;
    }
    
    static goBack() {
        console.log('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é');
        
        if (typeof Menu !== 'undefined') {
            Menu.show();
        } else {
            console.error('‚ùå Menu –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞');
            // Fallback –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
            location.reload();
        }
    }
    
    static showAlert(message) {
        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.showAlert(message);
        } else {
            alert(message);
        }
    }
    
    static saveUserData() {
        if (window.app && typeof window.app.saveUserData === 'function') {
            window.app.saveUserData();
        } else {
            // Fallback —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            try {
                localStorage.setItem('nemo_detective_data', JSON.stringify(window.appState.userData));
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e);
            }
        }
    }
    
    static showEpisodeError(message) {
        const container = document.getElementById('app-container');
        if (!container) return;
        
        container.innerHTML = `
            <div class="error-container">
                <h2>–û—à–∏–±–∫–∞</h2>
                <p>${message}</p>
                <button class="back-btn" onclick="EpisodeView.goBack()">‚Üê –í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ</button>
                <button class="back-btn" onclick="location.reload()">üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
            </div>
        `;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
if (typeof window !== 'undefined') {
    window.EpisodeView = EpisodeView;
    console.log('‚úÖ EpisodeView –∫–ª–∞—Å—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
}