class Rating {
    static show() {
        console.log('üìä Rating.show() –≤—ã–∑–≤–∞–Ω');
        
        const container = document.getElementById('app-container');
        if (!container) {
            console.error('‚ùå ERROR: app-container –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        container.innerHTML = `
            <div class="main-menu">
                <div class="decoration top-left"></div>
                <div class="decoration bottom-right"></div>
                
                <div class="main-title">
                    <h1>–†–ï–ô–¢–ò–ù–ì –î–ï–¢–ï–ö–¢–ò–í–û–í</h1>
                    <div class="subtitle">–õ–£–ß–®–ò–ï –°–´–©–ò–ö–ò</div>
                </div>
                
                <div style="z-index: 2; text-align: center; margin: 30px 0; max-width: 360px;">
                    <div style="color: #b8a050; margin-bottom: 20px; font-size: 1.1rem;">
                        –¢–æ–ø –¥–µ—Ç–µ–∫—Ç–∏–≤–æ–≤ –ø–æ –Ω–∞–±—Ä–∞–Ω–Ω—ã–º –æ—á–∫–∞–º
                    </div>
                    ${this.renderRealRating()}
                </div>
                
                <button class="menu-btn" onclick="Rating.goBack()" style="max-width: 200px;">
                    –ù–ê–ó–ê–î –í –ú–ï–ù–Æ
                </button>
            </div>
        `;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (window.appState) {
            window.appState.currentView = 'rating';
        }
        
        console.log('‚úÖ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞–∑–∞–Ω');
    }
    
    static renderRealRating() {
        const allPlayers = this.getAllRealPlayers();
        
        if (allPlayers.length === 0) {
            return `
                <div style="color: #b8a050; padding: 40px 20px;">
                    –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö.<br>
                    –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!
                </div>
            `;
        }
        
        return `
            <div class="rating-list" style="text-align: left; margin: 20px 0;">
                ${allPlayers.map((player, index) => `
                    <div class="rating-item ${player.isCurrentUser ? 'current-user' : ''}" 
                         style="display: flex; justify-content: space-between; 
                                align-items: center; margin: 12px 0; padding: 12px;
                                background: ${player.isCurrentUser ? 'rgba(255,215,0,0.1)' : 'rgba(255,255,255,0.05)'};
                                border: 1px solid ${player.isCurrentUser ? 'rgba(255,215,0,0.3)' : 'rgba(255,255,255,0.1)'};
                                border-radius: 8px;">
                        <div style="display: flex; align-items: center; flex: 1;">
                            <span style="font-weight: bold; color: #ffd700; width: 30px;">
                                ${index + 1}.
                            </span>
                            <span style="color: ${player.isCurrentUser ? '#ffd700' : '#e6e6e6'}; margin-left: 10px;">
                                ${player.name}
                            </span>
                        </div>
                        <span style="color: #ffd700; font-weight: bold;">
                            ${player.score} –±–∞–ª–ª–æ–≤
                        </span>
                    </div>
                `).join('')}
            </div>
            <div style="color: #b8a050; font-size: 0.9rem; margin-top: 15px;">
                –í—Å–µ–≥–æ –¥–µ—Ç–µ–∫—Ç–∏–≤–æ–≤: ${allPlayers.length}
            </div>
        `;
    }
    
    static getAllRealPlayers() {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ localStorage
        const realPlayers = [];
        const currentUserId = window.appState?.userData?.userId;
        
        try {
            // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ localStorage
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                
                // –ò—â–µ–º –∫–ª—é—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
                if (key && key.startsWith('nemo_detective_data_')) {
                    try {
                        const userData = JSON.parse(localStorage.getItem(key));
                        if (userData && userData.userId && userData.score !== undefined) {
                            const userName = this.getUserName(userData.userId);
                            
                            realPlayers.push({
                                name: userName,
                                score: userData.score || 0,
                                userId: userData.userId,
                                isCurrentUser: userData.userId === currentUserId
                            });
                        }
                    } catch (e) {
                        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', key, e);
                    }
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            const currentUser = window.appState?.userData;
            if (currentUser && currentUser.userId) {
                const userExists = realPlayers.some(player => player.userId === currentUser.userId);
                if (!userExists) {
                    realPlayers.push({
                        name: this.getUserName(currentUser.userId),
                        score: currentUser.score || 0,
                        userId: currentUser.userId,
                        isCurrentUser: true
                    });
                }
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:', error);
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-20
        return realPlayers
            .sort((a, b) => b.score - a.score)
            .slice(0, 20);
    }
    
    static getUserName(userId) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ ID
        if (userId.startsWith('tg_')) {
            return `–î–µ—Ç–µ–∫—Ç–∏–≤_${userId.substr(3, 4)}`;
        } else if (userId.startsWith('user_')) {
            return `–°—ã—â–∏–∫_${userId.substr(5, 4)}`;
        }
        
        // –î–ª—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
        const demoNames = {
            'sherlock': '–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å',
            'poirot': '–≠—Ä–∫—é–ª—å –ü—É–∞—Ä–æ', 
            'marple': '–ú–∏—Å—Å –ú–∞—Ä–ø–ª',
            'wolfe': '–ù–∏—Ä–æ –í—É–ª—å—Ñ',
            'marlowe': '–§–∏–ª–∏–ø –ú–∞—Ä–ª–æ—É'
        };
        
        return demoNames[userId] || `–î–µ—Ç–µ–∫—Ç–∏–≤_${userId.substr(0, 4)}`;
    }
    
    static saveCurrentUserToGlobal() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        const currentUser = window.appState?.userData;
        if (!currentUser || !currentUser.userId) return;
        
        try {
            const storageKey = `nemo_detective_data_${currentUser.userId}`;
            const userData = {
                userId: currentUser.userId,
                name: this.getUserName(currentUser.userId),
                score: currentUser.score || 0,
                lastActive: Date.now()
            };
            
            localStorage.setItem(storageKey, JSON.stringify(userData));
            console.log('‚úÖ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:', error);
        }
    }
    
    static goBack() {
        console.log('üîô –í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞');
        
        if (typeof Menu !== 'undefined') {
            Menu.show();
        } else {
            console.error('‚ùå Menu –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞');
            this.showFallbackMenu();
        }
    }
    
    static showFallbackMenu() {
        const container = document.getElementById('app-container');
        if (!container) return;
        
        container.innerHTML = `
            <div class="main-menu">
                <div class="logo">üïµÔ∏è –í–ï–ß–ù–´–ô –î–ï–¢–ï–ö–¢–ò–í</div>
                <p>–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</p>
                <button class="menu-btn" onclick="location.reload()">üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
            </div>
        `;
    }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        Rating.saveCurrentUserToGlobal();
    }, 2000);
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
if (typeof window !== 'undefined') {
    window.Rating = Rating;
    console.log('‚úÖ Rating –∫–ª–∞—Å—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
}