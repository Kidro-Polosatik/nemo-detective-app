// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class NemoDetectiveApp {
    constructor() {
        console.log('üïµÔ∏è NemoDetectiveApp —Å–æ–∑–¥–∞–Ω');
        this.tg = window.Telegram?.WebApp || null;
        this.init();
    }
    
    init() {
        console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if (typeof Menu === 'undefined' || typeof EpisodeView === 'undefined') {
            console.error('‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
                Menu: typeof Menu,
                EpisodeView: typeof EpisodeView,
                Rating: typeof Rating
            });
            this.showError('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ø–∏–∑–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        const episodeCount = Object.keys(window.episodes || {}).length;
        if (episodeCount === 0) {
            console.error('‚ùå –≠–ø–∏–∑–æ–¥—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            this.showError('–≠–ø–∏–∑–æ–¥—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
            return;
        }
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —ç–ø–∏–∑–æ–¥–æ–≤: ${episodeCount}`);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp —Å –∑–∞—â–∏—Ç–æ–π
        if (this.tg) {
            try {
                this.tg.expand();
                this.tg.enableClosingConfirmation();
                console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            } catch (error) {
                console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω:', error);
            }
        } else {
            console.log('‚ÑπÔ∏è Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.initAppState();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        this.setupBackButton();
        
        // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.start();
    }
    
    initAppState() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –î–û —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.loadUserData();
    }
    
    start() {
        console.log('üé¨ –í–µ—á–Ω—ã–π –î–µ—Ç–µ–∫—Ç–∏–≤ - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try {
            if (typeof Menu !== 'undefined' && typeof Menu.show === 'function') {
                Menu.show();
                console.log('‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
            } else {
                throw new Error('Menu.show –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ' + error.message);
        }
    }
    
    loadUserData() {
        try {
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram Cloud Storage
            if (this.tg && this.tg.CloudStorage) {
                this.tg.CloudStorage.getItem('nemo_detective_data', (error, cloudData) => {
                    if (!error && cloudData) {
                        try {
                            const parsedData = JSON.parse(cloudData);
                            this.initWithUserData(parsedData);
                            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Cloud Storage:', parsedData);
                        } catch (parseError) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Cloud Storage –¥–∞–Ω–Ω—ã—Ö:', parseError);
                            this.loadFromLocalStorage();
                        }
                    } else {
                        // –ï—Å–ª–∏ –≤ –æ–±–ª–∞–∫–µ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                        this.loadFromLocalStorage();
                    }
                });
            } else {
                // Fallback –Ω–∞ localStorage
                this.loadFromLocalStorage();
            }
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
            this.initWithDefaultData();
        }
    }

    loadFromLocalStorage() {
        try {
            const savedData = localStorage.getItem('nemo_detective_data');
            if (savedData) {
                const parsedData = JSON.parse(savedData);
                this.initWithUserData(parsedData);
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', parsedData);
            } else {
                console.log('‚ÑπÔ∏è –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
                this.initWithDefaultData();
            }
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', e);
            this.initWithDefaultData();
        }
    }

    initWithUserData(userData) {
        window.appState = {
            currentView: 'menu',
            currentEpisodeId: null,
            userData: {
                score: userData.score || 0,
                currentEpisode: Math.max(userData.currentEpisode || 1, 1),
                completedEpisodes: Array.isArray(userData.completedEpisodes) ? 
                    userData.completedEpisodes : [],
                userId: userData.userId || this.getUserId()
            }
        };
    }

    initWithDefaultData() {
        window.appState = {
            currentView: 'menu',
            currentEpisodeId: null,
            userData: {
                score: 0,
                currentEpisode: 1,
                completedEpisodes: [],
                userId: this.getUserId()
            }
        };
    }

    getUserId() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.tg && this.tg.initDataUnsafe && this.tg.initDataUnsafe.user) {
            return `tg_${this.tg.initDataUnsafe.user.id}`;
        }
        
        // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage ID
        let userId = localStorage.getItem('nemo_user_id');
        if (!userId) {
            userId = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('nemo_user_id', userId);
        }
        return userId;
    }

    // –ú–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    saveUserData() {
        try {
            if (!window.appState?.userData) {
                console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                return;
            }
            
            const dataToSave = {
                score: window.appState.userData.score,
                currentEpisode: window.appState.userData.currentEpisode,
                completedEpisodes: window.appState.userData.completedEpisodes,
                userId: window.appState.userData.userId,
                lastSave: Date.now()
            };
            
            const dataString = JSON.stringify(dataToSave);
            
            // –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Telegram Cloud Storage
            if (this.tg && this.tg.CloudStorage) {
                this.tg.CloudStorage.setItem('nemo_detective_data', dataString, (error) => {
                    if (error) {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Cloud Storage:', error);
                        // Fallback –Ω–∞ localStorage
                        this.saveToLocalStorage(dataString);
                    } else {
                        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Cloud Storage');
                    }
                });
            } else {
                // Fallback –Ω–∞ localStorage
                this.saveToLocalStorage(dataString);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            if (typeof Rating !== 'undefined' && typeof Rating.saveCurrentUserToGlobal === 'function') {
                Rating.saveCurrentUserToGlobal();
            }
            
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', e);
        }
    }
    
    saveToLocalStorage(dataString) {
        try {
            localStorage.setItem('nemo_detective_data', dataString);
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', e);
        }
    }
    
    setupBackButton() {
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω
        if (this.tg && this.tg.BackButton) {
            try {
                this.tg.BackButton.show();
                this.tg.BackButton.onClick(() => {
                    console.log('üîô –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥');
                    this.handleBackButton();
                });
                console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
            } catch (error) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥:', error);
            }
        }
    }
    
    handleBackButton() {
        if (window.appState.currentView !== 'menu' && typeof Menu !== 'undefined') {
            Menu.show();
        } else if (this.tg) {
            this.tg.close();
        }
    }
    
    showError(message) {
        const container = document.getElementById('app-container');
        if (container) {
            container.innerHTML = `
                <div class="error-container" style="text-align: center; padding: 40px 20px;">
                    <h2 style="color: #ff6b6b; margin-bottom: 20px;">üïµÔ∏è –í–µ—á–Ω—ã–π –î–µ—Ç–µ–∫—Ç–∏–≤</h2>
                    <p style="margin-bottom: 20px; font-size: 16px;">${message}</p>
                    <button onclick="location.reload()" style="
                        background: #ffd700; 
                        color: #1a1a2e; 
                        border: none; 
                        padding: 12px 24px; 
                        border-radius: 8px; 
                        cursor: pointer;
                        font-weight: bold;
                    ">üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
                </div>
            `;
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.app = new NemoDetectiveApp();

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ–≥–¥–∞ –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
document.addEventListener('DOMContentLoaded', function() {
    console.log('=== DOM –ó–ê–ì–†–£–ñ–ï–ù ===');
    
    // –ñ–¥—ë–º —á—Ç–æ–±—ã –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã —É—Å–ø–µ–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    setTimeout(() => {
        console.log('=== –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===');
        console.log('Menu:', typeof Menu);
        console.log('EpisodeView:', typeof EpisodeView);
        console.log('Rating:', typeof Rating);
        console.log('Episodes:', Object.keys(window.episodes || {}));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        const hasRequiredComponents = typeof Menu !== 'undefined' && 
                                    typeof EpisodeView !== 'undefined' &&
                                    Object.keys(window.episodes || {}).length > 0;
        
        if (!hasRequiredComponents) {
            console.error('‚ùå –ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å');
            const errorDetails = {
                Menu: typeof Menu,
                EpisodeView: typeof EpisodeView,
                Episodes: Object.keys(window.episodes || {}).length
            };
            
            const container = document.getElementById('app-container');
            if (container) {
                container.innerHTML = `
                    <div class="error-container" style="text-align: center; padding: 40px 20px;">
                        <h2 style="color: #ff6b6b; margin-bottom: 20px;">üïµÔ∏è –í–µ—á–Ω—ã–π –î–µ—Ç–µ–∫—Ç–∏–≤</h2>
                        <p style="margin-bottom: 15px;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:</p>
                        <div style="text-align: left; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin: 15px 0;">
                            <p>Menu: ${errorDetails.Menu}</p>
                            <p>EpisodeView: ${errorDetails.EpisodeView}</p>
                            <p>Episodes: ${errorDetails.Episodes}</p>
                        </div>
                        <button onclick="location.reload()" style="
                            background: #ffd700; 
                            color: #1a1a2e; 
                            border: none; 
                            padding: 12px 24px; 
                            border-radius: 8px; 
                            cursor: pointer;
                            font-weight: bold;
                            margin-top: 10px;
                        ">üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
                    </div>
                `;
            }
        }
    }, 100);
});