// js/engine/vn-engine.js - –î–≤–∏–∂–æ–∫ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –Ω–æ–≤–µ–ª–ª—ã —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
class VNEngine {
    static init() {
        console.log('üé¨ VN Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.currentScene = null;
        this.isTyping = false;
        this.currentText = '';
        this.currentEpisode = null;
        this.currentSceneIndex = 0;
        this.scenes = [];
        this.typingInterval = null;
    }
    
    static initEpisode(episode) {
        console.log('üé¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ø–∏–∑–æ–¥–∞ –í–ù:', episode.title);
        this.currentEpisode = episode;
        this.currentSceneIndex = 0;
        this.scenes = episode.vnScenes || [];
    }
    
    static showCurrentScene() {
        if (!this.scenes || this.scenes.length === 0) {
            console.error('‚ùå –ù–µ—Ç —Å—Ü–µ–Ω –¥–ª—è –ø–æ–∫–∞–∑–∞');
            this.episodeComplete();
            return;
        }
        
        if (this.currentSceneIndex >= this.scenes.length) {
            console.log('üéâ –≠–ø–∏–∑–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!');
            this.episodeComplete();
            return;
        }
        
        const scene = this.scenes[this.currentSceneIndex];
        this.showScene(scene);
    }
    
    static showScene(sceneData) {
        const container = document.getElementById('app-container');
        if (!container) {
            console.error('‚ùå ERROR: app-container –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        container.innerHTML = this.renderFirstPersonScene(sceneData);
        this.currentScene = sceneData;
        
        // –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Ü–µ–Ω –≤–∫–ª—é—á–∞–µ–º –ø–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–∞
        if (!sceneData.background.includes('notebook')) {
            this.typeText(sceneData.dialog.text);
        }
        
        console.log(`üé≠ –°—Ü–µ–Ω–∞ ${this.currentSceneIndex + 1}/${this.scenes.length}`);
    }
    
    static renderFirstPersonScene(scene) {
        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ü–µ–Ω–∞ —Å –±–ª–æ–∫–Ω–æ—Ç–æ–º (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ü–µ–Ω–∞)
        if (scene.background.includes('notebook')) {
            return `
                <div class="vn-scene notebook-scene">
                    <div class="notebook-content">
                        ${scene.dialog.text}
                    </div>
                    <div class="answer-section-final">
                        <input type="text" class="answer-input-final" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..." id="answer-input-final">
                        <button class="submit-btn-final" onclick="VNEngine.submitFinalAnswer()">
                            üîç –û–¢–ü–†–ê–í–ò–¢–¨ –û–¢–í–ï–¢
                        </button>
                    </div>
                    <div class="navigation-buttons">
                        <button class="nav-btn back" onclick="VNEngine.prevScene()" ${this.currentSceneIndex === 0 ? 'disabled' : ''}>
                            ‚Üê –ù–ê–ó–ê–î
                        </button>
                        <button class="nav-btn next" onclick="VNEngine.returnToMenu()">
                            üè† –í –ú–ï–ù–Æ
                        </button>
                    </div>
                </div>
            `;
        }
        
        // –û–±—ã—á–Ω–∞—è —Å—Ü–µ–Ω–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const isFirstScene = this.currentSceneIndex === 0;
        const isLastScene = this.currentSceneIndex === this.scenes.length - 1;
        const nextButtonText = isLastScene ? '–ó–ê–í–ï–†–®–ò–¢–¨' : '–î–ê–õ–ï–ï ‚Üí';
        
        return `
            <div class="vn-scene first-person" style="background-image: url('${scene.background}')">
                ${this.renderOtherCharacters(scene.characters)}
                ${this.renderDialog(scene.dialog)}
                <div class="navigation-buttons">
                    <button class="nav-btn back" onclick="VNEngine.prevScene()" ${isFirstScene ? 'disabled' : ''}>
                        ‚Üê –ù–ê–ó–ê–î
                    </button>
                    <button class="nav-btn next" onclick="VNEngine.nextScene()">
                        ${nextButtonText}
                    </button>
                </div>
                <button class="back-btn-vn" onclick="VNEngine.returnToMenu()">
                    ‚Üê –í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ
                </button>
            </div>
        `;
    }
    
    static renderOtherCharacters(characters) {
        if (!characters || !Array.isArray(characters)) return '';
        
        const isMobile = window.innerWidth <= 768;
        
        return characters
            .filter(char => char.visible !== false)
            .map(char => {
                const imagePath = `assets/chapter1/characters/${char.name}/${char.expression}.png`;
                const mobileClass = isMobile ? 'mobile' : '';
                
                return `
                    <div class="character-sprite ${char.position} ${mobileClass}" 
                         data-character="${char.name}"
                         style="background-image: url('${imagePath}')">
                    </div>
                `;
            }).join('');
    }
    
    static renderDialog(dialog) {
        const speaker = window.vnCharacters?.[dialog.speaker];
        const speakerName = speaker?.name || dialog.speaker || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        
        return `
            <div class="dialog-box">
                <div class="speaker-name">${speakerName}</div>
                <div class="dialog-text" id="dialog-text"></div>
            </div>
        `;
    }
    
    static typeText(text) {
        if (this.typingInterval) {
            clearInterval(this.typingInterval);
        }
        
        this.isTyping = true;
        this.currentText = '';
        const element = document.getElementById('dialog-text');
        if (!element) return;
        
        element.innerHTML = '';
        
        let i = 0;
        this.typingInterval = setInterval(() => {
            if (i < text.length) {
                this.currentText += text.charAt(i);
                element.innerHTML = this.currentText;
                i++;
            } else {
                clearInterval(this.typingInterval);
                this.isTyping = false;
            }
        }, 30);
    }
    
    static nextScene() {
        if (this.isTyping) {
            const element = document.getElementById('dialog-text');
            if (element && this.currentScene) {
                element.innerHTML = this.currentScene.dialog.text;
                this.isTyping = false;
                if (this.typingInterval) {
                    clearInterval(this.typingInterval);
                }
            }
        } else {
            this.currentSceneIndex++;
            this.showCurrentScene();
        }
    }
    
    static prevScene() {
        if (this.isTyping) {
            const element = document.getElementById('dialog-text');
            if (element && this.currentScene) {
                element.innerHTML = this.currentScene.dialog.text;
                this.isTyping = false;
                if (this.typingInterval) {
                    clearInterval(this.typingInterval);
                }
            }
        } else {
            if (this.currentSceneIndex > 0) {
                this.currentSceneIndex--;
                this.showCurrentScene();
            }
        }
    }
    
    static episodeComplete() {
        console.log('üèÅ –≠–ø–∏–∑–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω');
        
        if (this.currentEpisode && this.currentEpisode.hasInput) {
            this.showAnswerInput();
        } else {
            this.returnToMenu();
        }
    }
    
    static showAnswerInput() {
        const container = document.getElementById('app-container');
        if (!container) return;
        
        const fullEpisodeId = `${this.currentEpisode.chapter}_${this.currentEpisode.id}`;
        const isCompleted = window.appState?.userData?.completedEpisodes?.includes(fullEpisodeId);
        
        if (isCompleted) {
            container.innerHTML = `
                <div class="episode-container">
                    <div class="episode-title">
                        –ì–ª–∞–≤–∞ ${this.currentEpisode.chapter}, –≠–ø–∏–∑–æ–¥ ${this.currentEpisode.id}: ${this.currentEpisode.title} ‚úÖ
                    </div>
                    <div class="episode-text">
                        –≠–ø–∏–∑–æ–¥ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω! –í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –≤–µ—Ä–Ω—ã–º.
                    </div>
                    <div class="navigation-buttons">
                        <button class="nav-btn back" onclick="VNEngine.returnToMenu()">
                            ‚Üê –í –ú–ï–ù–Æ
                        </button>
                        <button class="nav-btn next" onclick="VNEngine.nextEpisode()">
                            –°–õ–ï–î–£–Æ–©–ò–ô ‚Üí
                        </button>
                    </div>
                </div>
            `;
        } else {
            container.innerHTML = `
                <div class="episode-container">
                    <div class="episode-title">
                        –ì–ª–∞–≤–∞ ${this.currentEpisode.chapter}, –≠–ø–∏–∑–æ–¥ ${this.currentEpisode.id}: ${this.currentEpisode.title}
                    </div>
                    <div class="episode-text">
                        –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥–∞–¥–∫—É:
                    </div>
                    
                    <div class="answer-section">
                        <input type="text" class="answer-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..." id="answer-input">
                        <button class="submit-btn" onclick="VNEngine.submitAnswer()">
                            üîç –û–¢–ü–†–ê–í–ò–¢–¨ –û–¢–í–ï–¢
                        </button>
                    </div>
                    
                    <div class="navigation-buttons">
                        <button class="nav-btn back" onclick="VNEngine.returnToMenu()">
                            ‚Üê –í –ú–ï–ù–Æ
                        </button>
                        <button class="nav-btn next" onclick="VNEngine.nextEpisode()">
                            –ü–†–û–ü–£–°–¢–ò–¢–¨ ‚Üí
                        </button>
                    </div>
                </div>
            `;
        }
    }
    
    static nextEpisode() {
        const currentEpisode = window.episodes[`${this.currentEpisode.chapter}_${this.currentEpisode.id}`];
        if (!currentEpisode) {
            console.error('‚ùå –¢–µ–∫—É—â–∏–π —ç–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            this.returnToMenu();
            return;
        }
        
        const nextEpisodeId = `${this.currentEpisode.chapter}_${parseInt(this.currentEpisode.id) + 1}`;
        
        if (window.episodes[nextEpisodeId]) {
            if (typeof EpisodeView !== 'undefined') {
                EpisodeView.show(nextEpisodeId);
            } else {
                console.error('‚ùå EpisodeView –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
                this.returnToMenu();
            }
        } else {
            console.log('üéâ –ì–ª–∞–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            this.showChapterComplete();
        }
    }
    
    static showChapterComplete() {
        const container = document.getElementById('app-container');
        if (!container) return;
        
        const userData = window.appState?.userData || { score: 0 };
        
        container.innerHTML = `
            <div class="episode-container">
                <div class="episode-title" style="color: #ffd700; font-size: 1.6em;">
                    üéâ –ì–õ–ê–í–ê –ó–ê–í–ï–†–®–ï–ù–ê!
                </div>
                <div class="episode-text" style="text-align: center; font-size: 1.2em;">
                    –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ì–ª–∞–≤—É 1.<br><br>
                    –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç: <strong>${userData.score} –±–∞–ª–ª–æ–≤</strong><br>
                    –ó–∞–≤–µ—Ä—à–µ–Ω–æ —ç–ø–∏–∑–æ–¥–æ–≤: <strong>${userData.completedEpisodes?.length || 0}</strong>
                </div>
                <div class="navigation-buttons">
                    <button class="nav-btn back" onclick="VNEngine.returnToMenu()">
                        ‚Üê –í –ú–ï–ù–Æ
                    </button>
                    <button class="nav-btn next" onclick="Menu.showArchive()">
                        –ê–†–•–ò–í ‚Üí
                    </button>
                </div>
            </div>
        `;
    }
    
    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (submitAnswer, handleCorrectAnswer, –∏ —Ç.–¥.)
    static submitAnswer() {
        const fullEpisodeId = `${this.currentEpisode.chapter}_${this.currentEpisode.id}`;
        const answerInput = document.getElementById('answer-input');
        let answer = answerInput ? answerInput.value.trim() : '';
        
        if (!answer) {
            this.showAlert('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π!');
            return;
        }
        
        const correctAnswers = window.episodeAnswers ? window.episodeAnswers[fullEpisodeId] : [];
        
        if (!correctAnswers || correctAnswers.length === 0) {
            console.error('‚ùå –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç–ø–∏–∑–æ–¥–∞:', fullEpisodeId);
            this.showAlert('–û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        const normalizedAnswer = this.normalizeAnswer(answer);
        const isCorrect = correctAnswers.some(correct => {
            const normalizedCorrect = this.normalizeAnswer(correct);
            return normalizedCorrect === normalizedAnswer;
        });
        
        if (isCorrect) {
            this.handleCorrectAnswer(fullEpisodeId);
        } else {
            this.handleWrongAnswer(answerInput);
        }
    }
    
    static submitFinalAnswer() {
        const answerInput = document.getElementById('answer-input-final');
        let answer = answerInput ? answerInput.value.trim() : '';
        
        if (!answer) {
            this.showAlert('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π!');
            return;
        }
        
        const fullEpisodeId = `${this.currentEpisode.chapter}_${this.currentEpisode.id}`;
        const correctAnswers = window.episodeAnswers ? window.episodeAnswers[fullEpisodeId] : [];
        
        if (!correctAnswers || correctAnswers.length === 0) {
            console.error('‚ùå –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç–ø–∏–∑–æ–¥–∞:', fullEpisodeId);
            this.showAlert('–û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        const normalizedAnswer = this.normalizeAnswer(answer);
        const isCorrect = correctAnswers.some(correct => {
            const normalizedCorrect = this.normalizeAnswer(correct);
            return normalizedCorrect === normalizedAnswer;
        });
        
        if (isCorrect) {
            this.handleCorrectAnswer(fullEpisodeId);
        } else {
            this.handleWrongAnswer(answerInput);
        }
    }
    
    static handleCorrectAnswer(fullEpisodeId) {
        const phrase = this.getRandomPhrase('correct');
        
        if (window.appState && window.appState.userData) {
            window.appState.userData.score += 10;
            
            const nextEpisodeNumber = parseInt(this.currentEpisode.id) + 1;
            window.appState.userData.currentEpisode = nextEpisodeNumber;
            
            if (!window.appState.userData.completedEpisodes) {
                window.appState.userData.completedEpisodes = [];
            }
            
            if (!window.appState.userData.completedEpisodes.includes(fullEpisodeId)) {
                window.appState.userData.completedEpisodes.push(fullEpisodeId);
            }
            
            this.saveUserData();
            
            this.showAlert(`‚úÖ ${phrase}! +10 –±–∞–ª–ª–æ–≤!`);
            
            setTimeout(() => {
                this.nextEpisode();
            }, 1500);
            
        } else {
            this.showAlert(`‚úÖ ${phrase}!`);
            this.nextEpisode();
        }
    }
    
    static handleWrongAnswer(answerInput) {
        const phrase = this.getRandomPhrase('wrong');
        this.showAlert(`‚ùå ${phrase}`);
        
        if (answerInput) {
            answerInput.value = '';
            answerInput.focus();
        }
    }
    
    static normalizeAnswer(text) {
        return String(text)
            .toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
            .replace(/[^\w\s–∞-—è—ë]/gi, ' ')
            .replace(/\s+/g, ' ')
            .trim();
    }
    
    static getRandomPhrase(type) {
        if (!window.gamePhrases || !window.gamePhrases[type]) {
            return type === 'correct' ? '–í–µ—Ä–Ω–æ!' : '–ù–µ–≤–µ—Ä–Ω–æ!';
        }
        
        const phrases = window.gamePhrases[type];
        return phrases[Math.floor(Math.random() * phrases.length)];
    }
    
    static returnToMenu() {
        console.log('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∏–∑ –í–ù');
        
        this.currentEpisode = null;
        this.currentSceneIndex = 0;
        this.scenes = [];
        this.currentScene = null;
        this.isTyping = false;
        this.currentText = '';
        if (this.typingInterval) {
            clearInterval(this.typingInterval);
        }
        
        if (typeof Menu !== 'undefined' && typeof Menu.show === 'function') {
            Menu.show();
        } else {
            console.error('‚ùå Menu –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞');
            location.reload();
        }
    }
    
    static showAlert(message) {
        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.showAlert(message);
        } else {
            alert(message);
        }
    }
    
    static saveUserData() {
        if (window.app && typeof window.app.saveUserData === 'function') {
            window.app.saveUserData();
        } else {
            try {
                localStorage.setItem('nemo_detective_data', JSON.stringify(window.appState.userData));
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e);
            }
        }
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    VNEngine.init();
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
if (typeof window !== 'undefined') {
    window.VNEngine = VNEngine;
    console.log('‚úÖ VNEngine –∫–ª–∞—Å—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
}