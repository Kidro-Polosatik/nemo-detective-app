// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
class Menu {
    static show() {
        console.log('üéÆ Menu.show() –≤—ã–∑–≤–∞–Ω');
        
        const userData = window.appState?.userData || { 
            score: 0, 
            currentEpisode: 1,
            completedEpisodes: []
        };
        const container = document.getElementById('app-container');
        
        if (!container) {
            console.error('‚ùå ERROR: app-container –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º "–î–µ—Ç–µ–∫—Ç–∏–≤"
        const userName = this.getUserName();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–æ–≤–∏—á–æ–∫ –∏–ª–∏ –Ω–µ—Ç
        const isNewUser = userData.currentEpisode === 1 && 
                         userData.score === 0 && 
                         (!userData.completedEpisodes || userData.completedEpisodes.length === 0);
        
        container.innerHTML = `
            <div class="main-menu">
                <!-- –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã -->
                <div class="decoration top-left"></div>
                <div class="decoration bottom-right"></div>

                <!-- –í–µ—Ä—Ö–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ -->
                <div class="main-title">
                    <h1>–í–ï–ß–ù–´–ô –î–ï–¢–ï–ö–¢–ò–í</h1>
                    <div class="subtitle">–†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï</div>
                </div>

                <!-- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ -->
                <div class="menu-buttons-container">
                    ${isNewUser ? `
                    <button class="menu-btn start-btn" onclick="Menu.startChapter(1)">
                        –ù–ê–ß–ê–¢–¨ –î–ï–õ–û
                    </button>
                    ` : `
                    <button class="menu-btn start-btn" onclick="Menu.continueGame()">
                        –ü–†–û–î–û–õ–ñ–ò–¢–¨ –î–ï–õ–û
                    </button>
                    `}
                    
                    <button class="menu-btn" onclick="Menu.showArchive()">
                        –ê–†–•–ò–í –î–ï–õ
                    </button>
                    
                    <button class="menu-btn" onclick="Menu.showRating()">
                        –†–ï–ô–¢–ò–ù–ì –î–ï–¢–ï–ö–¢–ò–í–û–í
                    </button>
                </div>

                <!-- –ù–∏–∂–Ω—è—è –Ω–∞–¥–ø–∏—Å—å –∏ —Å—á–µ—Ç -->
                <div class="bottom-section">
                    <div class="quote clickable-quote" onclick="Menu.showSecretMessage()">
                        –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç - –∫–ª—é—á –∫ –≤–µ—á–Ω–æ–π –∑–∞–≥–∞–¥–∫–µ
                    </div>
                    <div class="score-display">
                        <strong>–ù–∞–∫–æ–ø–ª–µ–Ω–æ —É–ª–∏–∫:</strong> ${userData.score}
                    </div>
                </div>
            </div>
        `;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (window.appState) {
            window.appState.currentView = 'menu';
            window.appState.currentEpisodeId = null;
        }
        
        console.log('‚úÖ –ú–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ. –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', isNewUser);
    }
    
    static getUserName() {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏–∑ Telegram
        if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
            const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
            return tgUser.first_name || tgUser.username || '–î–µ—Ç–µ–∫—Ç–∏–≤';
        }
        return '–î–µ—Ç–µ–∫—Ç–∏–≤';
    }
    
static showSecretMessage() {
    const userName = this.getUserName();
    const container = document.getElementById('app-container');
    
    if (!container) return;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    let messageText = window.secretMessageText || `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, ${userName}!\n\n–≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–µ–∫—Ç–µ.`;
    
    // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messageText = messageText.replace('{username}', userName);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const lines = messageText.split('\n').filter(line => line.trim() !== '');
    
    container.innerHTML = `
        <div class="main-menu">
            <div class="decoration top-left"></div>
            <div class="decoration bottom-right"></div>
            
            <div class="secret-message-container">
                <div class="burnt-letter">
                    <!-- –≠—Ñ—Ñ–µ–∫—Ç—ã —Ç–ª–µ–Ω–∏—è -->
                    <div class="burning-edges">
                        <div class="burn-edge top-edge"></div>
                        <div class="burn-edge right-edge"></div>
                        <div class="burn-edge bottom-edge"></div>
                        <div class="burn-edge left-edge"></div>
                    </div>
                    
                    <!-- –≠—Ñ—Ñ–µ–∫—Ç—ã –¥—ã–º–∞ -->
                    <div class="smoke-effect smoke-1"></div>
                    <div class="smoke-effect smoke-2"></div>
                    <div class="smoke-effect smoke-3"></div>
                    
                    <!-- –ü—è—Ç–Ω–∞ –æ—Ç –æ–≥–Ω—è -->
                    <div class="burn-marks burn-mark-1"></div>
                    <div class="burn-marks burn-mark-2"></div>
                    
                    <!-- –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º -->
                    <div class="handwritten-text">
                        ${lines.map((line, index) => {
                            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å AllertsDonate
                            if (line.includes('AllertsDonate')) {
                                const textBefore = line.replace('AllertsDonate', '').trim();
                                return `
                                    <span class="letter-line centered">${textBefore}</span>
                                    <div class="donate-link">
                                        <a href="https://allertsdonate.com" target="_blank" class="donate-btn">
                                            AllertsDonate
                                        </a>
                                    </div>
                                `;
                            }
                            
                            // –î–ª—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
                            if (line.trim() === '') {
                                return `<span class="letter-line" style="margin-top: 15px;"></span>`;
                            }
                            
                            // –î–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ - —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏ –¥–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                            if (index === 0) {
                                return `<span class="letter-title">${line}</span>`;
                            }
                            
                            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ - —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
                            return `<span class="letter-line centered">${line}</span>`;
                        }).join('')}
                    </div>
                </div>
                
                <button class="return-btn" onclick="Menu.show()">
                    –í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ
                </button>
            </div>
        </div>
    `;
}
    
    static startChapter(chapterNumber) {
        console.log('üé¨ –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤—ã:', chapterNumber);
        
        if (typeof EpisodeView === 'undefined') {
            console.error('‚ùå ERROR: EpisodeView –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            this.showComponentError('EpisodeView');
            return;
        }
        
        EpisodeView.show(`${chapterNumber}_1`);
    }
    
    static continueGame() {
        console.log('‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–≥—Ä—ã');
        
        if (typeof EpisodeView === 'undefined') {
            console.error('‚ùå ERROR: EpisodeView –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            this.showComponentError('EpisodeView');
            return;
        }
        
        const currentEpisode = window.appState?.userData?.currentEpisode || 1;
        const currentChapter = 1;
        console.log('üîç –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–ø–∏–∑–æ–¥—É:', `${currentChapter}_${currentEpisode}`);
        EpisodeView.show(`${currentChapter}_${currentEpisode}`);
    }
    
    static showArchive() {
        console.log('üìÅ –ü–æ–∫–∞–∑ –∞—Ä—Ö–∏–≤–∞ –¥–µ–ª');
        
        const container = document.getElementById('app-container');
        const userData = window.appState?.userData || { 
            completedEpisodes: [],
            currentEpisode: 1
        };
        
        if (!container) return;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≥–ª–∞–≤–∞–º
        const completedCount = userData.completedEpisodes.length;
        const totalEpisodes = Object.keys(window.episodes || {}).length;
        const progress = totalEpisodes > 0 ? Math.round((completedCount / totalEpisodes) * 100) : 0;
        
        container.innerHTML = `
            <div class="main-menu">
                <div class="decoration top-left"></div>
                <div class="decoration bottom-right"></div>
                
                <div class="main-title">
                    <h1>–ê–†–•–ò–í –î–ï–õ</h1>
                    <div class="subtitle">–ü–†–û–ì–†–ï–°–° –ò –ü–û–í–¢–û–†–ï–ù–ò–ï</div>
                </div>
                
                <div style="z-index: 2; text-align: center; margin: 30px 0; max-width: 360px;">
                    <div style="margin: 20px 0; font-size: 1.2rem; color: #ffd700;">
                        –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%
                    </div>
                    
                    <div style="margin: 25px 0; padding: 15px; background: rgba(255,215,0,0.1); border-radius: 10px;">
                        <div style="font-size: 1rem; margin-bottom: 10px;">–ó–∞–≤–µ—Ä—à–µ–Ω–æ —ç–ø–∏–∑–æ–¥–æ–≤: ${completedCount}/${totalEpisodes}</div>
                        <div style="font-size: 1rem;">–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: ${userData.score} –±–∞–ª–ª–æ–≤</div>
                    </div>
                    
                    <div style="text-align: left; margin: 25px 0;">
                        <div style="font-size: 1.1rem; color: #ffd700; margin-bottom: 15px; text-align: center;">
                            –ì–ª–∞–≤–∞ 1: "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞"
                        </div>
                        ${this.renderEpisodeList(1, userData)}
                    </div>
                </div>
                
                <button class="menu-btn" onclick="Menu.show()" style="max-width: 200px;">
                    –ù–ê–ó–ê–î –í –ú–ï–ù–Æ
                </button>
            </div>
        `;
        
        if (window.appState) {
            window.appState.currentView = 'archive';
        }
    }
    
    static renderEpisodeList(chapter, userData) {
        const episodes = Object.keys(window.episodes || {})
            .filter(id => id.startsWith(chapter + '_'))
            .sort((a, b) => {
                const aNum = parseInt(a.split('_')[1]);
                const bNum = parseInt(b.split('_')[1]);
                return aNum - bNum;
            });
        
        let html = '';
        episodes.forEach(episodeId => {
            const episode = window.episodes[episodeId];
            const isCompleted = userData.completedEpisodes.includes(episodeId);
            const isAvailable = isCompleted || this.isEpisodeAvailable(episodeId, userData);
            
            html += `
                <div class="archive-episode ${isCompleted ? 'completed' : 'locked'}" 
                     style="margin: 12px 0; padding: 12px; border-radius: 8px; 
                            background: ${isCompleted ? 'rgba(255,215,0,0.1)' : 'rgba(128,128,128,0.1)'}; 
                            border: 1px solid ${isCompleted ? 'rgba(255,215,0,0.3)' : 'rgba(128,128,128,0.3)'};">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div style="flex: 1;">
                            <div style="font-weight: bold; color: ${isCompleted ? '#ffd700' : '#888'};">
                                –≠–ø–∏–∑–æ–¥ ${episode.id}: ${episode.title}
                            </div>
                            <div style="font-size: 0.9rem; color: ${isCompleted ? '#b8a050' : '#666'}; margin-top: 5px;">
                                ${isCompleted ? '‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω' : 'üîí –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
                            </div>
                        </div>
                        ${isAvailable ? `
                        <button class="menu-btn" onclick="Menu.playEpisode('${episodeId}')" 
                                style="padding: 8px 16px; font-size: 0.9rem; margin-left: 10px;">
                            ${isCompleted ? 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å' : '‚ñ∂Ô∏è –ò–≥—Ä–∞—Ç—å'}
                        </button>
                        ` : ''}
                    </div>
                </div>
            `;
        });
        
        return html;
    }
    
    static isEpisodeAvailable(episodeId, userData) {
        const [chapter, episodeNum] = episodeId.split('_');
        const episodeNumber = parseInt(episodeNum);
        
        if (episodeNumber === 1) return true;
        
        const prevEpisodeId = `${chapter}_${episodeNumber - 1}`;
        return userData.completedEpisodes.includes(prevEpisodeId);
    }
    
    static playEpisode(episodeId) {
        console.log('üéÆ –ó–∞–ø—É—Å–∫ —ç–ø–∏–∑–æ–¥–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞:', episodeId);
        
        if (typeof EpisodeView === 'undefined') {
            console.error('‚ùå ERROR: EpisodeView –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            this.showComponentError('EpisodeView');
            return;
        }
        
        EpisodeView.show(episodeId);
    }
    
    static showRating() {
        console.log('üìä –ü–æ–∫–∞–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞');
        
        if (typeof Rating === 'undefined') {
            console.error('‚ùå ERROR: Rating –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            this.showFallbackRating();
            return;
        }
        
        Rating.show();
    }
    
    static showComponentError(componentName) {
        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.showAlert(`–û—à–∏–±–∫–∞: ${componentName} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`);
        } else {
            alert(`–û—à–∏–±–∫–∞: ${componentName} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`);
        }
        
        setTimeout(() => {
            if (typeof Menu !== 'undefined') {
                Menu.show();
            }
        }, 1000);
    }
    
    static showFallbackRating() {
        const container = document.getElementById('app-container');
        const userData = window.appState?.userData || { score: 0 };
        
        if (!container) return;
        
        container.innerHTML = `
            <div class="main-menu">
                <div class="decoration top-left"></div>
                <div class="decoration bottom-right"></div>
                
                <div class="main-title">
                    <h1>–†–ï–ô–¢–ò–ù–ì –î–ï–¢–ï–ö–¢–ò–í–û–í</h1>
                    <div class="subtitle">–¢–û–ü –ò–ì–†–û–ö–û–í</div>
                </div>
                
                <div style="z-index: 2; text-align: center; margin: 40px 0;">
                    <div style="color: #b8a050; margin-bottom: 20px;">
                        –†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                    </div>
                    <div style="color: #b8a050; font-style: italic; padding: 20px;">
                        –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                    </div>
                </div>
                
                <button class="menu-btn" onclick="Menu.show()" style="max-width: 200px;">
                    –ù–ê–ó–ê–î –í –ú–ï–ù–Æ
                </button>
            </div>
        `;
        
        if (window.appState) {
            window.appState.currentView = 'rating';
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –∑–∞—â–∏—Ç–æ–π
if (typeof window !== 'undefined') {
    window.Menu = Menu;
    console.log('‚úÖ Menu –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ');
}